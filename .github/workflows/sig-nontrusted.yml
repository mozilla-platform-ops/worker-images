run-name: SIG - ${{ github.event.inputs.config }}
name: SIG Deployment - FXCI

on:
  workflow_dispatch:
    inputs:
      config:
        type: choice
        description: Choose which pool to build
        options:
        - win10-64-2009-alpha
        - win10-64-2009
        - win11-64-2009-alpha
        - win11-64-2009
        - win11-64-24h2-alpha
        - win11-64-24h2
        - win11-a64-24h2-tester-alpha
        - win11-a64-24h2-tester
        - win11-a64-24h2-builder-alpha
        - win11-a64-24h2-builder
        - win2022-64-2009-alpha
        - win2022-64-2009

permissions:
  id-token: write
  contents: read

jobs:
  check-access:
    name: "Verify User Access"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Load Authorized Users and Check Access
        shell: pwsh
        run: |
          $AUTHORIZED_USERS=$(Get-Content .github/relsre.json | Convertfrom-Json)
          if ($authorized_users -contains "${{ github.actor }}") {
            Write-host "User ${{ github.actor }} is authorized."
          }
          else {
            Write-Host "User ${{ github.actor }} is unauthorized."
            exit 1
          }
  packer:
    needs: check-access
    name: "Build ${{ github.event.inputs.config }}"
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
    steps:
      - uses: actions/checkout@v4
      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID_FXCI }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID_UNTRUSTED }}
          enable-AzPSSession: true
      - name: 'Run Packer'
        shell: pwsh
        run: |
          Import-Module .\bin\WorkerImages\WorkerImages.psm1
          $Vars = @{
            github_token = "${{ secrets.GITHUB_TOKEN }}"
            Key = '${{ github.event.inputs.config }}'
            Client_ID = "${{ secrets.AZURE_CLIENT_ID_FXCI }}"
            oidc_request_url = "${{ env.ACTIONS_ID_TOKEN_REQUEST_URL }}"
            oidc_request_token = "${{ env.ACTIONS_ID_TOKEN_REQUEST_TOKEN }}"
            Subscription_ID = "${{ secrets.AZURE_SUBSCRIPTION_ID_UNTRUSTED }}"
            Tenant_ID = "${{ secrets.AZURE_TENANT_ID }}"
            Application_ID = "${{ secrets.AZURE_APPLICATION_ID_FXCI }}"
          }
          New-AzSharedWorkerImage @Vars
          "sharedimageversion=$ENV:PKR_VAR_sharedimage_version" >> $env:GITHUB_ENV
      - name: Upload Release Notes Artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-notes-${{ github.event.inputs.config }}
          path: ${{ github.event.inputs.config }}-${{ env.sharedimageversion }}.md
          overwrite: true
          retention-days: 1
          if-no-files-found: error
  integration-tests:
    needs: packer
    name: "Trigger Integration Tests"
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Install Taskcluster CLI
        shell: bash
        run: |
          curl -L -o taskcluster.tar.gz https://github.com/taskcluster/taskcluster/releases/latest/download/taskcluster-linux-amd64.tar.gz
          tar -xzf taskcluster.tar.gz
          chmod +x taskcluster
          sudo mv taskcluster /usr/local/bin/
      - name: Trigger Integration Tests
        shell: bash
        env:
          CONFIG: ${{ github.event.inputs.config }}
        run: |
          # Transform config name: replace - with _
          TRANSFORMED_CONFIG=$(echo "$CONFIG" | sed 's/-/_/g')
          echo "Transformed config: $TRANSFORMED_CONFIG"
          
          # Trigger the hook and capture response
          RESPONSE=$(echo "{\"images\": [\"$TRANSFORMED_CONFIG\"]}" | taskcluster api hooks triggerHook project-releng cron-task-mozilla-platform-ops-worker-images/run-integration-tests)
          echo "Hook response: $RESPONSE"
          
          # Extract taskId from response
          TASK_ID=$(echo "$RESPONSE" | jq -r '.taskId')
          echo "Task ID: $TASK_ID"
          echo "task_id=$TASK_ID" >> $GITHUB_ENV
          
          # Wait for live.log to become available and get the actual log URL
          echo "Waiting for live.log to become available for task $TASK_ID..."
          RETRY_COUNT=0
          MAX_RETRIES=30
          LIVE_LOG_RESPONSE=""
          
          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            echo "Attempt $((RETRY_COUNT + 1))/$MAX_RETRIES: Checking for live.log..."
            LIVE_LOG_RESPONSE=$(taskcluster api queue getLatestArtifact "$TASK_ID" public/logs/live.log 2>/dev/null || echo "")
            
            if [ -n "$LIVE_LOG_RESPONSE" ]; then
              echo "Live log response received"
              break
            fi
            
            echo "Live log not ready yet, waiting 10 seconds..."
            sleep 10
            RETRY_COUNT=$((RETRY_COUNT + 1))
          done
          
          if [ -z "$LIVE_LOG_RESPONSE" ]; then
            echo "Failed to get live.log after $MAX_RETRIES attempts"
            exit 1
          fi
          
          # Extract the actual log URL from the JSON response
          LIVE_LOG_URL=$(echo "$LIVE_LOG_RESPONSE" | jq -r '.url')
          echo "Live log URL: $LIVE_LOG_URL"
          
          # Download the actual live_backing.log content
          echo "Downloading live_backing.log content..."
          LIVE_LOG_CONTENT=$(curl -s "$LIVE_LOG_URL")
          
          # Extract taskGroupId from the log content
          TASK_GROUP_ID=$(echo "$LIVE_LOG_CONTENT" | grep -o '"taskGroupId": "[^"]*"' | head -1 | sed 's/"taskGroupId": "\([^"]*\)"/\1/')
          echo "Task Group ID: $TASK_GROUP_ID"
          echo "task_group_id=$TASK_GROUP_ID" >> $GITHUB_ENV
          
          # Generate and display the test results URL
          TEST_RESULTS_URL="https://firefox-ci-tc.services.mozilla.com/tasks/groups/$TASK_GROUP_ID"
          echo "Integration test results available at: $TEST_RESULTS_URL"
          echo "test_results_url=$TEST_RESULTS_URL" >> $GITHUB_ENV
          
          # Wait for all tasks in the task group to complete and check their status
          echo "Monitoring task group $TASK_GROUP_ID for completion..."
          MONITOR_RETRY_COUNT=0
          MAX_MONITOR_RETRIES=120  # 20 minutes max wait time
          ALL_COMPLETED=false
          
          while [ $MONITOR_RETRY_COUNT -lt $MAX_MONITOR_RETRIES ] && [ "$ALL_COMPLETED" = "false" ]; do
            echo "Checking task group status (attempt $((MONITOR_RETRY_COUNT + 1))/$MAX_MONITOR_RETRIES)..."
            
            # Get all tasks in the task group
            TASK_GROUP_RESPONSE=$(taskcluster api queue listTaskGroup "$TASK_GROUP_ID" 2>/dev/null || echo "")
            
            if [ -z "$TASK_GROUP_RESPONSE" ]; then
              echo "Failed to get task group info, retrying in 10 seconds..."
              sleep 10
              MONITOR_RETRY_COUNT=$((MONITOR_RETRY_COUNT + 1))
              continue
            fi
            
            # Parse task statuses
            TASK_STATES=$(echo "$TASK_GROUP_RESPONSE" | jq -r '.tasks[].status.state')
            PENDING_OR_RUNNING=$(echo "$TASK_STATES" | grep -E "pending|running" | wc -l)
            COMPLETED_TASKS=$(echo "$TASK_STATES" | grep "completed" | wc -l)
            FAILED_TASKS=$(echo "$TASK_STATES" | grep "failed" | wc -l)
            EXCEPTION_TASKS=$(echo "$TASK_STATES" | grep "exception" | wc -l)
            TOTAL_TASKS=$(echo "$TASK_STATES" | wc -l)
            
            echo "Task status summary:"
            echo "  Total tasks: $TOTAL_TASKS"
            echo "  Completed: $COMPLETED_TASKS"
            echo "  Failed: $FAILED_TASKS"
            echo "  Exception: $EXCEPTION_TASKS"
            echo "  Pending/Running: $PENDING_OR_RUNNING"
            
            # Check if all tasks are complete (no pending or running)
            if [ "$PENDING_OR_RUNNING" -eq 0 ]; then
              ALL_COMPLETED=true
              echo "All tasks in task group have completed!"
              
              # Check for any failures
              if [ "$FAILED_TASKS" -gt 0 ] || [ "$EXCEPTION_TASKS" -gt 0 ]; then
                echo "❌ Integration tests FAILED!"
                echo "  Failed tasks: $FAILED_TASKS"
                echo "  Exception tasks: $EXCEPTION_TASKS"
                echo "  Check the task group for details: $TEST_RESULTS_URL"
                exit 1
              else
                echo "✅ All integration tests PASSED!"
                echo "  All $COMPLETED_TASKS tasks completed successfully"
              fi
            else
              echo "Tasks still running/pending, waiting 10 seconds..."
              sleep 10
              MONITOR_RETRY_COUNT=$((MONITOR_RETRY_COUNT + 1))
            fi
          done
          
          if [ "$ALL_COMPLETED" = "false" ]; then
            echo "⚠️  Timeout waiting for task group to complete after $((MAX_MONITOR_RETRIES * 10 / 60)) minutes"
            echo "Task group may still be running: $TEST_RESULTS_URL"
            exit 1
          fi
  sbom:
    needs: packer
    name: "Upload release notes"
    runs-on: ubuntu-latest
    permissions: write-all
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          path: sboms
          name: release-notes-${{ github.event.inputs.config }}
          merge-multiple: true
      - name: "Test SBOM Exists & Create PR"
        shell: pwsh  
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CONFIG: ${{ github.event.inputs.config }}
        run: |
          ## Install powershell-yaml module
          Set-PSRepository PSGallery -InstallationPolicy Trusted
          Install-Module powershell-yaml -ErrorAction Stop
          
          Get-ChildItem "sboms" -Recurse
          
          Get-ChildItem

          ## Get the shared image version from the config file
          $YAML = Convertfrom-Yaml (Get-Content "config/${{ env.CONFIG }}.yaml" -raw)
          git config --local user.name "github-actions[bot]"
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          
          ## Confirm it's there
          Get-ChildItem "sboms" -Recurse

          ## Store the file in a variable
          $SBOM_PATH = "sboms\${{ github.event.inputs.config }}-$($Yaml.sharedimage.image_version).md"
          $SBOM_NAME = "${{ github.event.inputs.config }}-$($Yaml.sharedimage.image_version).md"

          Write-host "SBOM Path: $SBOM_PATH"
          Write-host "SBOM Name: $SBOM_NAME"

          ## Create a new branch for the release notes
          $Date = Get-Date -Format "yyyyMMddTHHmm"
          $Repo = "${{ github.repository }}"

          if ($ENV:CONFIG -match "win10") {
            $ReleaseBranch = "releases/win10/$Date-docs"
          }
          elseif ($ENV:CONFIG -match "win11") {
            $ReleaseBranch = "releases/win11/$Date-docs"
          }
          elseif ($ENV:CONFIG -match "win2022") {
            $ReleaseBranch = "releases/win2022/$Date-docs"
          }
          else {
            $ReleaseBranch = $null
          }
          
          $branchExists = (gh api "/repos/$Repo/branches/$releaseBranch" | ConvertFrom-Json).Name
          
          if ($null -eq $branchExists) {
            git checkout -b $ReleaseBranch
            git push origin $ReleaseBranch
          } else {
            git checkout $ReleaseBranch
          }
        
          $PR_Body = @"
          # Release Notes for $($ENV:CONFIG).md

          Automatically generated PR for $($ENV:CONFIG).md
          "@

          $PR_Title = "$ENV:CONFIG ($Date) Image Update"
          Write-host "Using git add $SBOM_PATH"
          git add $SBOM_PATH
          Write-Host "Using git add ."
          git add .
          git commit -m "$($ENV:CONFIG) - Release Notes for $($ENV:CONFIG).md"
          git push -u origin $ReleaseBranch
          gh pr create --base main --head $ReleaseBranch --title $PR_Title --body $PR_Body
