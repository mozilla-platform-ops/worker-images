run-name: TCEng Azure - ${{ github.event.inputs.config }}
name: TCEng Azure

on:
  workflow_dispatch:
    inputs:
      config:
        type: choice
        description: Choose which pool to build
        options:
        - generic-worker-win2022-staging
        - generic-worker-win2022
        - generic-worker-win2022-gpu-staging
        - generic-worker-win2022-gpu
        - generic-worker-win11-24h2-staging
        - generic-worker-win2025-staging
        - image_development
      TASKCLUSTER_REF:
        type: string
        description: Git reference (branch, tag, or commit) to use


permissions:
  id-token: write
  contents: read

jobs:
  check-access:
    name: "Verify User Access"
    runs-on: ubuntu-latest
    steps:
      # TESTING ONLY: check out relops-1640 branch instead of trigger branch
      - uses: actions/checkout@v4
        with:
          ref: ${{ env.TARGET_BRANCH }}

      - name: Load Authorized Users and Check Access
        shell: pwsh
        run: |
          $TCEngUsers   = Get-Content .github/tceng.json | ConvertFrom-Json
          $RelsreUsers  = Get-Content .github/relsre.json | ConvertFrom-Json
          $AUTHORIZED_USERS = $TCEngUsers + $RelsreUsers

          if ($AUTHORIZED_USERS -contains "${{ github.actor }}") {
            Write-Host "User ${{ github.actor }} is authorized."
          } else {
            Write-Host "User ${{ github.actor }} is unauthorized."
            exit 1
          }

  config:
    needs: check-access
    name: "Create Image Tasks"
    runs-on: ubuntu-latest
    steps:
      # TESTING ONLY: check out relops-1640 branch instead of trigger branch
      - uses: actions/checkout@v4
        with:
          ref: ${{ env.TARGET_BRANCH }}

      - id: set-matrix
        shell: pwsh
        run: |
          Import-Module ${{ github.workspace }}\bin\WorkerImages\WorkerImages.psm1
          $Vars = @{
            team = "tceng"
            Key  = '${{ github.event.inputs.config }}'
          }
          Set-AzWorkerImageLocation @Vars
    outputs:
      LOCATIONS: ${{ steps.set-matrix.outputs.LOCATIONS }}

  packer:
    needs: config
    name: "${{ github.event.inputs.config }} - ${{ matrix.LOCATIONS }}"
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
    strategy:
      fail-fast: false
      matrix:
        locations: ${{ fromJson(needs.config.outputs.LOCATIONS) }}
    steps:
      # TESTING ONLY: check out relops-1640 branch instead of trigger branch
      - uses: actions/checkout@v4
        with:
          ref: ${{ env.TARGET_BRANCH }}

      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID_TCENG }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID_TCENG }}
          enable-AzPSSession: true

      - name: "Remove current images"
        uses: azure/powershell@v2
        with:
          inlineScript: |
            Import-Module ${{ github.workspace }}\bin\WorkerImages\WorkerImages.psm1
            ## Comment out for now, each run of TC image creations contains a UUId
            # Remove-AzWorkerImage -Key "${{ github.event.inputs.config }}" -Location "${{ matrix.LOCATIONS }}"
          azPSVersion: "latest"

      - name: 'Run Packer'
        shell: pwsh
        env:
          TASKCLUSTER_REF:    ${{ github.event.inputs.TASKCLUSTER_REF }}
        run: |
          Import-Module ${{ github.workspace }}\bin\WorkerImages\WorkerImages.psm1
          $Vars = @{
            team               = "tceng"
            Location           = "${{ matrix.LOCATIONS }}"
            Key                = '${{ github.event.inputs.config }}'
            Client_ID          = "${{ secrets.AZURE_CLIENT_ID_TCENG }}"
            oidc_request_url   = $env:ACTIONS_ID_TOKEN_REQUEST_URL
            oidc_request_token = $env:ACTIONS_ID_TOKEN_REQUEST_TOKEN            
            #oidc_request_url   = "${{ env.ACTIONS_ID_TOKEN_REQUEST_URL }}"
            #oidc_request_token = "${{ env.ACTIONS_ID_TOKEN_REQUEST_TOKEN }}"
            Subscription_ID    = "${{ secrets.AZURE_SUBSCRIPTION_ID_TCENG }}"
            Tenant_ID          = "${{ secrets.AZURE_TENANT_ID }}"
            Application_ID     = "${{ secrets.AZURE_APPLICATION_ID_TCENG }}"
          }
          New-AzWorkerImage @Vars
